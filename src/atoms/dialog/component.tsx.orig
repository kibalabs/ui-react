import React from 'react';

import { getClassName } from '@kibalabs/core';
import { ISingleAnyChildProps, useEventListener } from '@kibalabs/core-react';
import styled from 'styled-components';

<<<<<<< HEAD
import { Box } from '../../particles/box';

const StyledBackdrop = styled.div`
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
=======
import { defaultComponentProps, IComponentProps } from '../../model';
import { Box } from '../../particles/box';
import { useBuiltTheme } from '../../theming';
import { valueToCss } from '../../util';
import { IDialogTheme } from './theme';

interface IStyledBackdropProps {
  backdropColor: string;
}

const StyledBackdrop = styled.div<IStyledBackdropProps>`
  width: 100%;
  height: 100%;
  background: ${(props: IStyledBackdropProps): string => valueToCss(props.backdropColor)};
>>>>>>> main
  position: fixed;
  display: flex;
  justify-content: center;
  align-items: center;
  left: 0;
  top: 0;
<<<<<<< HEAD

  &.dialog-closed {
=======
  z-index: 999;

  &.closed {
>>>>>>> main
    display: none;
  }
`;

<<<<<<< HEAD
interface IDialogProps extends ISingleAnyChildProps {
=======
interface IDialogProps extends IComponentProps<IDialogTheme>, ISingleAnyChildProps {
>>>>>>> main
  isOpen: boolean;
  maxHeight?: string;
  maxWidth?: string;
  isScrollableVertically?: boolean;
  isScrollableHorizontally?: boolean;
<<<<<<< HEAD
=======
  isClosableByBackdrop?: boolean;
  isClosableByEscape?: boolean;
>>>>>>> main
  onCloseClicked: () => void;
}

export const Dialog = (props: IDialogProps): React.ReactElement | null => {
<<<<<<< HEAD
  const dialogRef = React.useRef();
  const maxWidth = props.maxWidth || '400px';
  const maxHeight = props.maxHeight || '400px';

  const onBackdropClicked = (event: React.SyntheticEvent<HTMLDivElement>) => {
    if (event.target === dialogRef.current) {
=======
  const dialogRef = React.useRef<HTMLDivElement | null>(null);
  const maxWidth = props.maxWidth || '400px';
  const maxHeight = props.maxHeight || '400px';
  const theme = useBuiltTheme('dialogs', props.variant, props.theme);

  const onBackdropClicked = (event: React.SyntheticEvent<HTMLDivElement>) => {
    if (props.isClosableByBackdrop && event.target === dialogRef.current) {
>>>>>>> main
      props.onCloseClicked();
    }
  };

<<<<<<< HEAD
  // NOTE(krishan711): this doesn't pass the dependencies in as it should
  useEventListener(document, 'keydown', (event: Event): void => {
    if (props.isOpen && event.key === 'Escape') {
=======
  // NOTE(krishan711): useEventListener doesn't pass the dependencies in as it should
  // NOTE(krishan711): useEventListener should allow the event object to be provided as a generic
  // @ts-ignore
  useEventListener(document, 'keydown', (event: React.KeyboardEvent): void => {
    if (props.isClosableByEscape && props.isOpen && event.key === 'Escape') {
>>>>>>> main
      props.onCloseClicked();
    }
  });

  return (
<<<<<<< HEAD
    <StyledBackdrop id='backdrop' className={getClassName(Dialog.displayName, !props.isOpen && 'dialog-closed')} ref={dialogRef} onClick={onBackdropClicked}>
      <Box variant='card' width='90%' maxWidth={maxWidth} maxHeight={maxHeight} isScrollableVertically={props.isScrollableVertically} isScrollableHorizontally={props.isScrollableHorizontally}>
=======
    <StyledBackdrop
      className={getClassName(Dialog.displayName, !props.isOpen && 'closed')}
      backdropColor={theme.backdropColor}
      ref={dialogRef}
      onClick={onBackdropClicked}
    >
      <Box
        width='90%'
        maxWidth={maxWidth}
        maxHeight={maxHeight}
        theme={theme.background}
        isScrollableVertically={props.isScrollableVertically}
        isScrollableHorizontally={props.isScrollableHorizontally}
      >
>>>>>>> main
        {props.children}
      </Box>
    </StyledBackdrop>
  );
};
Dialog.defaultProps = {
<<<<<<< HEAD
  isOpen: false,
  isScrollableHorizontally: true,
  isScrollableVertically: true,
=======
  ...defaultComponentProps,
  isOpen: false,
  isScrollableHorizontally: true,
  isScrollableVertically: true,
  isClosableByBackdrop: true,
  isClosableByEscape: true,
>>>>>>> main
};

Dialog.displayName = 'Dialog';
